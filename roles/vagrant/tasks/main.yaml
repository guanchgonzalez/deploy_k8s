#
#   Vagrant deployment tasks when no IaaS is available
#
# Target hosts: local
#


- name: Create deployment dirs
  with_items:
  - "{{ VAGRANT_ENV_HOME }}"
  - "{{ MISC_PATH }}"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory

- name: Destroy previous VM's
  ansible.builtin.command:
    cmd: "vagrant destroy -f"
    chdir: "{{ VAGRANT_ENV_HOME }}"

- name: Generate Vagrantfile from template
  ansible.builtin.template:
    src: "Vagrantfile.j2"
    dest: "{{ VAGRANT_ENV_HOME }}/Vagrantfile"

# - name: Copy provision shell-script into vagrant environment
#    ansible.builtin.template:
#     src: "setup_hosts.sh.j2"
#     dest: "{{ VAGRANT_ENV_HOME }}/setup_hosts.sh"
#
# - name: Debugging breakpoint
#   fail:

- name: Import box image
  block:
  - name: Check if the box is already downloaded
    ansible.builtin.command:
      cmd: "vagrant box list | grep '{{ VAGRANT_BOX }}'"
      chdir: "{{ VAGRANT_ENV_HOME }}"

  rescue:
  - name: Download the box image
    ansible.builtin.command:
      cmd: "vagrant box add --provider virtualbox {{ VAGRANT_BOX }}"
      chdir: "{{ VAGRANT_ENV_HOME }}"

- name: Execute Vagrantfile
  ansible.builtin.command:
    cmd: "vagrant up"
    chdir: "{{ VAGRANT_ENV_HOME }}"

- name: Create hosts file with node lists
  block:
  - name: Create empty hosts file
    ansible.builtin.file:
      path: "{{ MISC_PATH }}/hosts"
      state: touch

  - name: Insert master entries into hosts file
    loop: "{{ range(1, MASTER_NODES + 1) | list }}"
    ansible.builtin.lineinfile:
      path: "{{ MISC_PATH }}/hosts"
      line: "{{ SUBNET }}{{ MASTERS_IP_BASE + item }} {{ VM_PREFIX }}master{{ ( item < 10 ) | ternary('0', '') }}{{ item }}.{{ DOMAIN }}"

  - name: Insert worker entries into hosts file
    loop: "{{ range(1, WORKER_NODES + 1) | list }}
    ansible.builtin.lineinfile:
      path: "{{ MISC_PATH }}/hosts"
      line: "{{ SUBNET }}{{ WORKERS_IP_BASE + item }} {{ VM_PREFIX }}node{{ ( item < 10 ) | ternary('0', '') }}{{ item }}.{{ DOMAIN }}"

- name: Remove previous known_hosts entries
  ansible.builtin.lineinfile:
    path: "~/.ssh/known_hosts"
    regexp: '^.*{{ DOMAIN }}.*$'
    state: absent

- name: Update the hosts entries
  become: true
  block:
  - name: Remove previous hosts entries
    ansible.builtin.lineinfile:
      path: "/etc/hosts"
      regexp: '^.*{{ DOMAIN }}.*$'
      state: absent

  - name: Insert new hosts entries
    ansible.builtin.blockinfile:
      path: "/etc/hosts"
      block: "{{ lookup('ansible.builtin.file', '{{ MISC_PATH }}/hosts' ) }}"

