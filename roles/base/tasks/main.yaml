#
#   Initial tasks for every VM
#
# Target hosts: master, worker
#


- name: Include the DNF update role
  ansible.builtin.include_role:
    name: packages
    apply: {"become": true}
  vars:
    packages:
    - pkg: wget

- name: Debug. Show hostvars.inventory_hostname
  ansible.builtin.debug:
    # var: hostvars[inventory_hostname]
    var: vars

- name: Enabling parameters in SSH service as CLIENT
  become: true
  ansible.builtin.lineinfile:
    path: "/etc/ssh/ssh_config"
    regexp: "{{ item.key }}"
    line: "{{ item.value }}"
  with_items:
  - {key: '^# Host', value: 'Host *'}
  - {key: '^ *ServerAliveInterval', value: '  ServerAliveInterval 20'}
  - {key: '^ *ServerAliveCountMax', value: '  ServerAliveCountMax 360'}
  - {key: '^ *PasswordAuthentication', value: '  PasswordAuthentication no'}
  - {key: '^ *PubkeyAuthentication', value: '  PubkeyAuthentication yes',}

- name: Enabling parameters in SSH service as SERVER
  become: true
  block:
  - name: Set parameters values
    ansible.builtin.lineinfile:
      path: "/etc/ssh/sshd_config"
      regexp: "{{ item.key }}"
      line: "{{ item.value }}"
      validate: sshd -t -f %s
    with_items:
    - {key: '^ClientAliveInterval', value: 'ClientAliveInterval 20'}
    - {key: '^ClientAliveCountMax', value: 'ClientAliveCountMax 360'}
    - {key: '^PasswordAuthentication', value: 'PasswordAuthentication no'}
    - {key: '^PubkeyAuthentication', value: 'PubkeyAuthentication yes'}
  always:
  - name: Restart SSH service
    ansible.builtin.systemd_service:
      name: sshd
      state: restarted
      enabled: true

- name: Configuring network service
  become: true
  block:
  - name: Set hostname with private IP in /etc/hosts
    ansible.builtin.replace:
      path: "/etc/hosts"
      regexp: '^.*{{ ansible_nodename }}.*'
      replace: '{{ ansible_eth1.ipv4.address}}\t{{ ansible_nodename }} {{ ansible_nodename }}.local'

  - name: Set Google DNS servers
    ansible.builtin.blockinfile:
      path: "/etc/NetworkManager/NetworkManager.conf"
      prepend_newline: true
      block: |
        [global-dns-domain-*]
        servers=8.8.8.8, 8.8.4.4

  - name: Disable IPv6 with sysctl
    ansible.posix.sysctl:
      name: "{{ item }}"
      value: '1'
      state: present
      sysctl_set: true
      reload: true
    with_items:
    - "net.ipv6.conf.all.disable_ipv6"
    - "net.ipv6.conf.default.disable_ipv6"
    - "net.ipv6.conf.lo.disable_ipv6"
  always:
  - name: Restart NetworkManager service
    ansible.builtin.systemd_service:
      name: NetworkManager
      state: restarted
      enabled: true

- name: Disable firewalld service
  ansible.builtin.systemd_service:
    name: firewalld
    state: stopped
    enabled: false

- name: Disable SElinux
  ansible.posix.selinux:
    state: disabled
  register: reboot_required

- name: Reboot the VM
  ansible.builtin.reboot:
  when: reboot_required.reboot_required
  ignore_errors: true

- name: Debug. Show hostvars.inventory_hostname
  ansible.builtin.debug:
    var: hostvars[inventory_hostname]

