#
#   Initial tasks for every VM
#
# Target hosts: master, worker
#

- name: Enable parameters in SSH service as CLIENT
  with_items:
  - { key: '^# Host', value: 'Host *' }
  - { key: '^ *ServerAliveInterval', value: '  ServerAliveInterval 360' }
  - { key: '^ *ServerAliveCountMax', value: '  ServerAliveCountMax 5' }
  - { key: '^ *PasswordAuthentication', value: '  PasswordAuthentication no' }
  - { key: '^ *PubkeyAuthentication', value: '  PubkeyAuthentication yes' }
  ansible.builtin.lineinfile:
    path: "/etc/ssh/ssh_config"
    regexp: '{{ item.key }}'
    line: '{{ item.value }}'

- name: Enabling parameters in SSH service as SERVER
  block:
  - name: Enable parameters in SSH service as SERVER
    with_items:
    - { key: '^MaxAuthTries', value: 'MaxAuthTries 3' }
    - { key: '^ClientAliveInterval', value: 'ClientAliveInterval 360' }
    - { key: '^ClientAliveCountMax', value: 'ClientAliveCountMax 5' }
    - { key: '^PasswordAuthentication', value: 'PasswordAuthentication no' }
    - { key: '^PubkeyAuthentication', value: 'PubkeyAuthentication yes' }
    ansible.builtin.lineinfile:
      path: "/etc/ssh/sshd_config"
      regexp: '{{ item.key }}'
      line: '{{ item.value }}'
      validate: sshd -t -f %s

  always:
  - name: Restart SSH service
    ansible.builtin.systemd_service:
      name: sshd
      state: restarted
      enabled: true

- name: Configuring network service
  block:
  - name: Set hostname in /etc/hostname
    ansible.builtin.lineinfile:
      path: "/etc/hostname"
      line: "{{ ansible_nodename }}"

  - name: Set Google DNS servers
    ansible.builtin.blockinfile:
      path: "/etc/NetworkManager/NetworkManager.conf"
      # prepend_newline: true
      block: |
        [global-dns-domain-*]
        servers=8.8.8.8, 8.8.4.4

  - name: Disable IPv6 and enable IPv4 forwarding with sysctl
    with_items:
    - "net.ipv6.conf.all.disable_ipv6"
    - "net.ipv6.conf.default.disable_ipv6"
    - "net.ipv6.conf.lo.disable_ipv6"
    - "net.ipv4.ip_forward"
    ansible.posix.sysctl:
      name: "{{ item }}"
      value: '1'
      state: present
      sysctl_set: true
      reload: true

  always:
  - name: Restart NetworkManager service
    ansible.builtin.systemd_service:
      name: NetworkManager
      state: restarted
      enabled: true

- name: Disable firewalld service
  ansible.builtin.systemd_service:
    name: firewalld
    state: stopped
    enabled: false

- name: Disable SElinux
  register: reboot_required
  ansible.posix.selinux:
    state: disabled

- name: Reboot the VM
  when: reboot_required.reboot_required
  ignore_errors: true
  ansible.builtin.reboot:


