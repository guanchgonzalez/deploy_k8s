#
#   ITER OpenNebula deployment tasks
#
# Target hosts: iaas (but local connection by default)
#

- name: Get env vars
  run_once: true
  block:
  - name: Get IAAS var from env file
    ansible.builtin.set_fact:
      iaas_info: "{{ lookup('ansible.builtin.ini', 'IAAS type=properties file=' +
        ENV_FILE) | split(' ') }}"

  - name: Get encripted variables
    ansible.builtin.include_vars:
      file: "vault.yaml"

  - name: Get nodename and user parameters
    ansible.builtin.set_fact:
      cacheable: true
      VM_PREFIX: "{{ iaas_info.0 | regex_replace('\"', '') }}"
      DOMAIN: "{{ iaas_info.1 | regex_replace('\"', '') }}"
      DEF_ADMIN_PASS: "{{ def_admin_pass }}"
      NEW_ADMIN_PASS: "{{ new_admin_pass }}"

- name: Create deployment dirs
  run_once: true
  ansible.builtin.file:
    path: "{{ MISC_PATH }}"
    state: "directory"

- name: Remove previous known_hosts entries in controller node
  run_once: true
  ansible.builtin.lineinfile:
    path: "~/.ssh/known_hosts"
    regexp: '^.*{{ DOMAIN }}.*$'
    state: absent

- name: Remove previous hosts entries in controller node
  become: true
  run_once: true
  ansible.builtin.lineinfile:
    path: "/etc/hosts"
    regexp: '^.*{{ DOMAIN }}.*$'
    state: absent

- name: Insert new hosts entries in controller node
  become: true
  ansible.builtin.lineinfile:
    path: "/etc/hosts"
    line: "{{ ansible_host }} {{ inventory_hostname }}"

- name: Renew default VMs user password at first login attempt
  register: result
  changed_when: result.rc == 0
  ignore_errors: true
  # no_log: true
  ansible.builtin.expect:
    timeout: 5
    command: "ssh -o StrictHostKeychecking=no {{ def_user }}@{{ inventory_hostname }}"
    responses:
      ".*password: ":
      - "{{ DEF_ADMIN_PASS }}"
      ".*actual: ":
      - "{{ DEF_ADMIN_PASS }}"
      ".*contrase.*":
      - "{{ NEW_ADMIN_PASS }}"
      - "{{ NEW_ADMIN_PASS }}"

- name: Prepare default user in every VM after its first login
  vars:
    ansible_connection: ssh
    ansible_ssh_pass: "{{ NEW_ADMIN_PASS }}"
  remote_user: "{{ def_user }}"
  when: result.changed
  block:
  - name: Set Public key for default VMs user after the first login
    ansible.builtin.expect:
      timeout: 5
      command: "ssh-keygen -q -t ed25519"
      responses:
        ".*key.*":
        - ""
        ".*y/n.*":
        - "y"
        "Enter.*":
        - ""
        - ""

  - name: Copy controller user pub key as authorized key after the first login
    ansible.builtin.lineinfile:
      create: true
      line: "{{ lookup('ansible.builtin.file', '~/.ssh/id_ed25519.pub') }}"
      path: "~/.ssh/authorized_keys"
      mode: "0600"

- name: Enable NOPASSWD for wheel group users in every VM
  vars:
    ansible_connection: ssh
    ansible_become_pass: "{{ NEW_ADMIN_PASS }}"
  become: true
  remote_user: "{{ def_user }}"
  when: result.changed
  ansible.builtin.lineinfile:
    regexp: '^# %wheel'
    line: '%wheel ALL=(ALL)	NOPASSWD: ALL'
    path: "/etc/sudoers"
    validate: 'visudo -cf %s'

- name: Remove previous known_hosts entries in every VM
  vars:
    ansible_connection: ssh
  remote_user: "{{ def_user }}"
  ansible.builtin.lineinfile:
    create: true
    path: "~/.ssh/known_hosts"
    regexp: '^.*{{ DOMAIN }}.*$'
    state: absent

- name: Update hosts entries in every VM
  vars:
    ansible_connection: ssh
  become: true
  remote_user: "{{ def_user }}"
  block:
  - name: Remove previous hosts entries in every VM
    ansible.builtin.lineinfile:
      path: "/etc/hosts"
      regexp: '{{ DOMAIN }}'
      state: absent

  - name: Insert new hosts entries in every VM
    ansible.builtin.blockinfile:
      path: "/etc/hosts"
      block: "{{ lookup('ansible.builtin.file', '/etc/hosts') | regex_findall('^.*' +
        DOMAIN + '$', multiline=true) | join('

        ') }}"
